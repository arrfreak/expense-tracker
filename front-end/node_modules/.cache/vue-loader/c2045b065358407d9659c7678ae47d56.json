{"remainingRequest":"/Users/akshaykumar/Documents/api-ink/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/akshaykumar/Documents/api-ink/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/akshaykumar/Documents/api-ink/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/akshaykumar/Documents/api-ink/src/components/TableDisplay.vue?vue&type=template&id=fa6fc978&scoped=true&","dependencies":[{"path":"/Users/akshaykumar/Documents/api-ink/src/components/TableDisplay.vue","mtime":1585494976807},{"path":"/Users/akshaykumar/Documents/api-ink/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akshaykumar/Documents/api-ink/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/akshaykumar/Documents/api-ink/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/akshaykumar/Documents/api-ink/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}